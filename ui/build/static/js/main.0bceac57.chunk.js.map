{"version":3,"sources":["clients/httpClient.js","utils/common.js","clients/restClient.js","resources/reports.js","App.js","reportWebVitals.js","index.js"],"names":["httpClient","url","options","user","localStorage","getItem","token","JSON","parse","api_token","headers","Headers","get","set","myFetchJson","requestHeaders","Accept","has","body","FormData","authenticated","fetch","then","response","text","status","statusText","json","message","e","errors","Object","keys","Promise","reject","HttpError","resolve","api_url","getList","resource","params","pagination","page","perPage","sort","field","order","filter","myParams","query","sortBy","toLowerCase","limit","key","constructor","Array","i","length","apiUrl","stringify","data","total","getOne","id","endpointExt","getMany","ids","getManyReference","target","update","method","updateMany","create","delete","deleteMany","encodeURIComponent","ReportIcon","RouterIcon","ReportFilter","props","Filter","SelectInput","source","choices","name","alwaysOn","ReportList","List","title","filters","bulkActionButtons","Datagrid","TextField","label","sortable","FunctionField","render","reference","referenceId","referenceType","payload","referenceResourceId","referenceResourceType","DateField","ShowButton","EditButton","ReportEdit","Edit","SimpleForm","TextInput","disabled","ReportShow","Show","SimpleShowLayout","history","require","createBrowserHistory","App","Admin","dataProvider","restClient","Resource","list","edit","show","icon","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bceac57.chunk.js","sourcesContent":["import { fetchUtils, HttpError } from 'react-admin'\n\nexport const httpClient = (url, options = {}) => {\n    \n    const user = localStorage.getItem('user')\n    const token = user ? JSON.parse(user).api_token : null\n    if ( ! options) {\n        options = {}\n    }\n    if ( ! options.headers) {\n        options.headers = new Headers()\n    }\n\n    const contentType = options.headers.get('Content-Type')\n    options.headers.set('Accept', 'application/json')\n    options.headers.set('Authorization', 'Bearer ' + token)\n\n    return myFetchJson(url, options)\n}\n\nexport const Request = (url, options = {}) => {\n\n    if ( ! options.headers) {\n        options.headers = new Headers()\n    }\n\n    const user = localStorage.getItem('user')\n    const token = user ? JSON.parse(user).api_token : null\n\n    const contentType = options.headers.get('Content-Type')\n    options.headers.set('Accept', 'application/json')\n    options.headers.set('Authorization', 'Bearer ' + token)\n\n    // add your own headers here\n    // options.headers.set('Content-Type', contentType || 'application/json')\n    return fetch(url, options)\n}\n\nexport const myFetchJson = (url, options = {}) => {\n    \n    const requestHeaders = (options.headers ||\n        new Headers({\n            Accept: 'application/json',\n        }));\n    if (\n        !requestHeaders.has('Content-Type') &&\n        !(options && options.body && options.body instanceof FormData)\n    ) {\n        requestHeaders.set('Content-Type', 'application/json');\n    }\n    if (options.user && options.user.authenticated && options.user.token) {\n        requestHeaders.set('Authorization', options.user.token);\n    }\n\n    return fetch(url, { ...options, headers: requestHeaders })\n        .then(response =>\n            response.text().then(text => ({\n                status: response.status,\n                statusText: response.statusText,\n                headers: response.headers,\n                body: text,\n            }))\n        )\n        .then(({ status, statusText, headers, body }) => {\n            let json;\n            try {\n                json = JSON.parse(body);\n            } catch (e) {\n                // not json, no big deal\n            }\n            if (status < 200 || status >= 300) {\n                let message\n                if (json && json.errors) {\n                    message = json.errors[Object.keys(json.errors)[0]][0]\n                } else if (json && json.message) {\n                    message = json.message\n                }\n                return Promise.reject(\n                    new HttpError(\n                        message || statusText,\n                        status,\n                        json\n                    )\n                );\n            }\n            return Promise.resolve({ status, headers, body, json });\n        });\n};\n","export const api_url = 'http://localhost:3000/api'\n\nexport const apiUrl = uri => uri ? api_url + '/' + uri : api_url\n\nexport const myNumber = val => isNaN(val) ? 0 : Math.round(Number(val) * 100)/100\n\nexport const ucFirst = str => {\n    return str && str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport const isObject = obj => {\n  var type = typeof obj\n  return (type === 'function') || (type === 'object' && !!obj);\n}\n","import { stringify } from 'query-string'\nimport { isObject, api_url as apiUrl } from '../utils/common'\nimport { httpClient } from './httpClient'\n\nexport default {\n    getList: (resource, params) => {\n        let { page, perPage } = params.pagination\n        const { field, order } = params.sort\n        const filter = { ...params.filter }\n\n        const myParams = { ...params }\n\n        delete myParams.filter\n        delete myParams.sort\n        delete myParams.pagination\n\n        const query = {\n            sortBy: `${field || 'createdAt'}:${order.toLowerCase()}`,\n            page: page || 1,\n            limit: perPage || 10,\n            ...myParams,\n        }\n\n        for (var key in filter) {\n            if (filter[key] == '' || ! filter[key]) { continue }\n            if (filter[key].constructor === Array) {\n                for (var i = 0; i < filter[key].length; i++) {\n                    query['filter['+key+']['+i+']'] = filter[key][i]\n                }\n            } else {                        \n                query['filter['+key+']'] = filter[key]\n            }\n        }\n\n        const url = `${apiUrl}/${resource}?${stringify(query)}`\n\n        return httpClient(url).then(({ headers, json }) => {\n            return ({\n                data: json.data,\n                total: json.total,\n            })\n        })\n    },\n\n    getOne: (resource, params) => {\n        let url = `${apiUrl}/${resource}/${params.id}`\n        url = params.endpointExt ? url + '/' + params.endpointExt : url\n        if (params.params) {\n            url = url + '?' + stringify(params.params)\n        }\n\n        return httpClient(url).then(({ json }) => ({\n            data: json,\n        }))\n    },\n\n    getMany: (resource, params) => {\n        let query = {\n            sortBy: 'createdAt:desc',\n            limit: 25,\n        }\n\n        for (var i = 0; i < params.ids.length; i++) {\n            query['filter[id]['+i+']'] = params.ids[i]\n        }\n\n        const url = `${apiUrl}/${resource}?${stringify(query)}`\n\n        return httpClient(url).then(({ json }) => ({ data: json.data }))\n    },\n\n    getManyReference: (resource, params) => {\n        const { page, perPage } = params.pagination\n        const { field, order } = params.sort\n        const filter = { ...params.filter }\n\n        filter[params.target] = params.id\n\n        const query = {\n            sortBy: `${field || 'createdAt'}:${order.toLowerCase()}`,\n            page: page || 1,\n            limit: perPage || 10,\n        }\n\n        for (var key in filter) {\n            if (filter[key].constructor === Array) {\n                for (var i = 0; i < filter[key].length; i++) {\n                    query['filter['+key+']['+i+']'] = filter[key][i]\n                }\n            } else {                        \n                query['filter['+key+']'] = filter[key]\n            }\n        }\n\n        const url = `${apiUrl}/${resource}?${stringify(query)}`\n\n        return httpClient(url).then(({ headers, json }) => ({\n            data: json.data,\n            total: json.total,\n        }))\n    },\n\n    update: (resource, params) => {\n        const url = `${apiUrl}/${resource}/${params.id}`\n        const data = new FormData()\n        let method = 'PUT'\n\n        return httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method,\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json }))\n    },\n\n    updateMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids}),\n        };\n        return httpClient(`${apiUrl}/${resource}?${stringify(query)}`, {\n            method: 'PUT',\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json }));\n    },\n\n    create: (resource, params) => {\n        const url = `${apiUrl}/${resource}`\n        const data = new FormData()\n        let method = 'POST'\n        \n        return httpClient(`${apiUrl}/${resource}`, {\n            method,\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json }))\n    },\n\n    delete: (resource, params) => {\n        return httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'DELETE',\n        }).then(({ json }) => ({ data: json }))\n    },\n\n    deleteMany: (resource, params) => {\n        const url = `${apiUrl}/${resource}/${encodeURIComponent(JSON.stringify(params.ids))}`\n        return httpClient(url, {\n            method: 'DELETE',\n        }).then(({ json }) => ({ data: json }))\n    }\n\n}\n","import React from 'react'\n\nimport {\n    List, Show, Delete, Datagrid, EmailField, TextField, EditButton,\n    DateField, ChipField, ShowButton, required, SimpleForm, Edit,\n    TextInput, SelectInput, Filter, FunctionField, ReferenceField,\n    TabbedShowLayout, Tab, ReferenceManyField, ReferenceInput,\n    AutocompleteInput, NumberInput, Create, BooleanInput,\n    SimpleShowLayout\n} from 'react-admin'\n\nimport RouterIcon from '@material-ui/icons/Router'\n\nimport { ucFirst } from '../utils/common'\n\nexport const ReportIcon = RouterIcon\n\nconst ReportFilter = props => (\n    <Filter {...props}>\n        <SelectInput source=\"state\" choices={[\n            {id: 'OPEN', name: 'Open'},\n            {id: 'BLOCKED', name: 'Blocked'},\n            {id: 'RESOLVED', name: 'Resolved'},\n        ]} alwaysOn />\n    </Filter>\n)\n\nexport const ReportList = props => (\n    <List title=\"Reports\" {...props} filters={<ReportFilter />} bulkActionButtons={false}>\n        <Datagrid>\n            <TextField source=\"id\" />\n            <TextField source=\"state\" />\n            <TextField source=\"source\" />\n            <TextField source=\"payload.reportType\" label=\"Type\" sortable={false} />\n            <FunctionField label=\"Reference\" render={({ reference }) =>  <span label={reference.referenceId}>{reference.referenceType}</span> } />\n            <FunctionField label=\"Resource\" render={({ payload }) => <span label={payload.referenceResourceId}>{payload.referenceResourceType}</span> } />\n            <TextField source=\"payload.message\" label=\"Message\" sortable={false} />\n            <DateField source=\"createdAt\" />\n            <ShowButton />\n            <EditButton />\n        </Datagrid>\n    </List>\n)\n\nexport const ReportEdit = props => (\n    <Edit {...props}>\n        <SimpleForm>\n            <TextInput disabled source=\"id\" />\n            <SelectInput source=\"state\" choices={[\n                {id: 'OPEN', name: 'Open'},\n                {id: 'BLOCKED', name: 'Blocked'},\n                {id: 'RESOLVED', name: 'Resolved'},\n            ]} />\n        </SimpleForm>\n    </Edit>\n)\n\nexport const ReportShow = props => (\n    <Show {...props}>\n        <SimpleShowLayout>\n            <TextField source=\"id\" />\n            <TextField source=\"state\" />\n            <TextField source=\"source\" />\n            <TextField source=\"sourceIdentityId\" />\n            <TextField source=\"reference.referenceId\" label=\"Reference id\" />\n            <TextField source=\"reference.referenceType\" label=\"Reference type\" />\n            <TextField source=\"payload.source\" />\n            <TextField source=\"payload.reportType\" />\n            <TextField source=\"payload.message\" />\n            <TextField source=\"payload.reportId\" />\n            <TextField source=\"payload.referenceResourceId\" />\n            <TextField source=\"payload.referenceResourceType\" />\n            <TextField source=\"payload.reportType\" label=\"Type\" />\n            <DateField source=\"createdAt\" />\n            <DateField source=\"updatedAt\" />\n        </SimpleShowLayout>\n    </Show>\n)\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Admin, Resource } from 'react-admin'\nimport { httpClient } from './clients/httpClient'\nimport restClient from './clients/restClient'\n\nimport { ReportList, ReportEdit, ReportShow, ReportIcon } from './resources/reports'\n\nconst history = require('history').createBrowserHistory()\n\nconst App = () => (\n  <Admin title=\"Report manager UI\" dataProvider={restClient} history={history}>\n    <Resource name=\"reports\" options={{label:\"Reports\"}} list={ReportList} edit={ReportEdit} show={ReportShow} icon={ReportIcon} />\n  </Admin>\n)\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}